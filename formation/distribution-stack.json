{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "c564a3a4-6892-44ce-b147-125a225bd011": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 340,
                    "y": 10
                },
                "z": 0,
                "embeds": []
            },
            "31c64eb2-a22a-4f39-89e8-8149003f750c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 340,
                    "y": -90
                },
                "z": 0,
                "embeds": []
            },
            "4c2bdb35-f695-4401-97c0-1956e808a89c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 150,
                    "y": 10
                },
                "z": 0,
                "embeds": []
            },
            "226ca93a-77d5-4e77-912f-4beb15b268c5": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 482.33517260495773,
                    "y": -151.8720738148522
                },
                "z": 0,
                "embeds": [],
                "isassociatedwith": [
                    "31c64eb2-a22a-4f39-89e8-8149003f750c"
                ]
            },
            "0e4c86c0-c19f-4e5e-a75b-9a4b83bb66e6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 340,
                    "y": 110
                },
                "z": 0,
                "embeds": []
            },
            "461dca28-584d-4393-a39c-33d6c1553f58": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 550,
                    "y": 10
                },
                "z": 0,
                "embeds": [],
                "dependson": [
                    "d7e88c58-b23d-4069-a554-5843f359a26b"
                ]
            },
            "d7e88c58-b23d-4069-a554-5843f359a26b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 620,
                    "y": -70
                },
                "z": 0,
                "embeds": []
            },
            "a7140dd2-a449-4e36-96b3-2ef316c34a17": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 440,
                    "y": 10
                },
                "z": 0,
                "embeds": [],
                "isassociatedwith": [
                    "461dca28-584d-4393-a39c-33d6c1553f58"
                ]
            },
            "1b0a0c79-7fd5-4379-93a5-a446b7051f5c": {
                "source": {
                    "id": "461dca28-584d-4393-a39c-33d6c1553f58"
                },
                "target": {
                    "id": "d7e88c58-b23d-4069-a554-5843f359a26b"
                },
                "z": 11
            }
        }
    },
    "Resources": {
        "Distribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Aliases": [
                        {
                            "Fn::Join": [
                                ".",
                                [
                                    {
                                        "Ref": "ScopeName"
                                    },
                                    {
                                        "Ref": "ApexDomainName"
                                    }
                                ]
                            ]
                        }
                    ],
                    "CacheBehaviors": [
                        {
                            "PathPattern": "listing/*",
                            "AllowedMethods": [
                                "GET",
                                "HEAD"
                            ],
                            "DefaultTTL": 900,
                            "MaxTTL": 900,
                            "MinTTL": 900,
                            "ForwardedValues": {
                                "QueryString": false,
                                "Headers": [
                                    "Host"
                                ]
                            },
                            "TargetOriginId": "BackendStaticOrigin",
                            "ViewerProtocolPolicy": "redirect-to-https",
                            "Compress": true
                        }
                    ],
                    "Comment": {
                        "Ref": "AWS::StackName"
                    },
                    "DefaultCacheBehavior": {
                        "AllowedMethods": [
                            "GET",
                            "HEAD"
                        ],
                        "DefaultTTL": 0,
                        "MaxTTL": 0,
                        "MinTTL": 0,
                        "ForwardedValues": {
                            "QueryString": false,
                            "Headers": []
                        },
                        "TargetOriginId": "PublicBucketOrigin",
                        "ViewerProtocolPolicy": "redirect-to-https",
                        "Compress": true,
                        "LambdaFunctionAssociations": [
                            {
                                "EventType": "origin-request",
                                "LambdaFunctionARN": {
                                    "Ref": "OriginRequestFunctionVersion"
                                }
                            }
                        ],
                        "FunctionAssociations": [
                            {
                                "EventType": "viewer-request",
                                "FunctionARN": {
                                    "Fn::GetAtt": [
                                        "ViewerRequest",
                                        "FunctionMetadata.FunctionARN"
                                    ]
                                }
                            }
                        ]
                    },
                    "Enabled": true,
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "PublicBucket",
                                    "RegionalDomainName"
                                ]
                            },
                            "Id": "PublicBucketOrigin",
                            "S3OriginConfig": {}
                        },
                        {
                            "DomainName": {
                                "Fn::Join": [
                                    ".",
                                    [
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "ScopeName"
                                                    },
                                                    "api"
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "ApexDomainName"
                                        }
                                    ]
                                ]
                            },
                            "Id": "BackendStaticOrigin",
                            "CustomOriginConfig": {
                                "OriginProtocolPolicy": "https-only"
                            }
                        }
                    ],
                    "PriceClass": "PriceClass_All",
                    "ViewerCertificate": {
                        "AcmCertificateArn": {
                            "Ref": "AcmCertificate"
                        },
                        "SslSupportMethod": "sni-only",
                        "MinimumProtocolVersion": "TLSv1"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c564a3a4-6892-44ce-b147-125a225bd011"
                }
            },
            "DependsOn": [
                "PublicBucket"
            ]
        },
        "PublicBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "ScopeName"
                            },
                            {
                                "Ref": "ApexDomainName"
                            }
                        ]
                    ]
                },
                "AccessControl": "PublicRead"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "31c64eb2-a22a-4f39-89e8-8149003f750c"
                }
            }
        },
        "CdnRoute": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "HostedZoneId"
                },
                "Name": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "ScopeName"
                            },
                            {
                                "Ref": "ApexDomainName"
                            }
                        ]
                    ]
                },
                "AliasTarget": {
                    "HostedZoneId": "Z2FDTNDATAQYW2",
                    "DNSName": {
                        "Fn::GetAtt": [
                            "Distribution",
                            "DomainName"
                        ]
                    }
                },
                "Type": "A"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4c2bdb35-f695-4401-97c0-1956e808a89c"
                }
            }
        },
        "PublicBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "PublicBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "PublicBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Principal": "*"
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "226ca93a-77d5-4e77-912f-4beb15b268c5"
                }
            }
        },
        "ViewerRequest": {
            "Type": "AWS::CloudFront::Function",
            "Properties": {
                "AutoPublish": true,
                "FunctionCode": "\n/* See https://medium.com/@chrispointon/default-files-in-s3-subdirectories-using-cloudfront-and-lambda-edge-941100a3c629\n Register this as the viewer-request trigger handler */\n\n\"use strict\";\n\n\nfunction objectToQueryString(obj) {\n  var str = [];\n  for (var param in obj)\n    if (obj[param].multiValue)\n      str.push(param + \"=\" + obj[param].multiValue.map((item) => item.value).join(','));\n    else if (obj[param].value == '')\n      str.push(param);\n    else\n      str.push(param + \"=\" + obj[param].value);\n\n  return str.join(\"&\");\n}\n\n\nfunction handler(event) {\n  // Extract the request from the CloudFront event that is sent to Lambda@Edge\n  var request = event.request;\n\n  var host = request.headers.host.value;\n\n  request.headers[\"x-forwarded-host\"] = { value: host };\n\n  // Extract the URI and params from the request\n  var olduri = request.uri;\n  //console.log(olduri)\n\n  // Match any uri that ends with some combination of\n  // [0-9][a-z][A-Z]_- and append a slash\n  var endslashuri = olduri.replace(/(\\/[\\w\\-]+)$/, \"$1/\");\n\n  //console.log(\"Old URI: \" + olduri);\n  //console.log(\"End slash URI: \" + endslashuri);\n\n  if (endslashuri != olduri) {\n    // If we changed the uri, 301 to the version with a slash, appending querystring\n    /*var params = \"\";\n    console.log(request.querystring)\n    if (\"querystring\" in request && request.querystring.length > 0) {\n      params = \"?\" + request.querystring;\n    }\n    var newuri = endslashuri + params;*/\n\n    var newuri = endslashuri\n\n    if (Object.keys(request.querystring).length) {\n      newuri = `${endslashuri}?${objectToQueryString(request.querystring)}`\n    }\n\n    //console.log(\"Params: \" + params);\n    //console.log(\"New URI: \" + newuri);\n    //console.log(newuri)\n\n    var response = {\n      statusCode: 301,\n      statusDescription: \"Permanently moved\",\n      headers: {\n        location: {\n          value: newuri\n        }\n\n      }\n    };\n\n    //console.log(\"redirect\")\n    return response;\n  } else {\n    //console.log(\"bypass\")\n    // Return to CloudFront\n    return request;\n  }\n};\n",
                "FunctionConfig": {
                    "Comment": {
                        "Fn::Sub": "Viewer request handler for ${AWS::StackName}"
                    },
                    "Runtime": "cloudfront-js-1.0"
                },
                "Name": {
                    "Fn::Sub": "viewer-request-${AWS::StackName}"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0e4c86c0-c19f-4e5e-a75b-9a4b83bb66e6"
                }
            }
        },
        "OriginRequestFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Request origin resolver for SPA and static resources.\n",
                "Code": {
                    "ZipFile": "const path = require('path');\nexports.handler = async (event) => {\n  var request = event.Records[0].cf.request;\n return request;\n};\n"
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::Sub": "${LambdaFunctionExecRole.Arn}"
                },
                "Runtime": "nodejs14.x",
                "Tags": [
                    {
                        "Key": "ScopeName",
                        "Value": {
                            "Ref": "ScopeName"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "461dca28-584d-4393-a39c-33d6c1553f58"
                }
            },
            "DependsOn": [
                "LambdaFunctionExecRole"
            ]
        },
        "LambdaFunctionExecRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "edgelambda.amazonaws.com",
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d7e88c58-b23d-4069-a554-5843f359a26b"
                }
            }
        },
        "OriginRequestFunctionVersion": {
            "Type": "AWS::Lambda::Version",
            "Properties": {
                "FunctionName": {
                    "Ref": "OriginRequestFunction"
                },
                "Description": {
                    "Fn::Sub": "Origin request for ${ScopeName}"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a7140dd2-a449-4e36-96b3-2ef316c34a17"
                }
            }
        }
    },
    "Parameters": {
        "ScopeName": {
            "Description": "Name of the current scope (<<ScopeName>>.ua-wck.com)",
            "Type": "String"
        },
        "ApexDomainName": {
            "Description": "Apex domain (always ua-wck.com)",
            "Type": "String"
        },
        "AcmCertificate": {
            "AllowedPattern": "^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$",
            "Description": "[ Optional ] The AWS Certification Manager certificate ARN for the CloudFront distribution certificate - this certificate should be created in the us-east-1 (N. Virginia) region and must reference the WordPress domain name you use below.",
            "Type": "String"
        },
        "HostedZoneId": {
            "Description": "Hosted Zone ID for ua-wck.com",
            "Type": "String"
        }
    }
}